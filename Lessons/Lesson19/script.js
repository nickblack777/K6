'use strict';


// Оператор присваивания (=)

let x = 2 * 3 - 1; // 5

let a, b, c;

a = b = c = 2 + 2; // 4

let z = 3 - ( a = b + 1 ); // -2

// Оператор = возвращает значение, а не только присваивает


// Оператор остатка от деления (%)

console.log( 5 % 2 ); // 1
console.log( 8 % 3 ); // 2
console.log( 6 % 3 ); // 0


// Возведение в степень (**)

console.log( 2 ** 2 ); // 4

console.log( 2 ** 4) // 16

console.log( 4 ** (1/2) ); // 2 - корень из 4


// Инкремент/декремент

// Инкремент - оператор который увеличикает число на 1 (++)

let counter = 2;

counter++;

console.log( counter ); //3

// Декремент - оператор который уменьшает число на 1 (--)

counter--;

console.log( counter ); // 2

// Инкремент и декремент можно применять только к переменным.


/*
    Эти операторы могут быть расположены не только после переменной, но и до.
    Расположение после - называется 'постфиксным'
    Расположение до - называется 'префиксным'

*/

let counter2 = 1;

let changed_number = ++counter2;

console.log( changed_number ); // 2

/*
    В этом выражении сначала выполнится префиксная форма инкремента, а потом
    присваивание
*/


let counter3 = 10;

let changed_number2 = counter3++;

console.log( changed_number2 ); // 10

console.log( counter3 );  // 11

/*
    В этом выражении сначала выполнится присваивание, а потом постфиксная форма
    инкремента
*/



// Сокращенная арифметика

let number6 = 5;

number6 = number6 * 5; // 25

number6 *= 5; // 125 Сокращенное умножение

/*
    +=
    -=
    *=
    /=
    %=

*/

let m = 2;
m *= 3 + 5; // 16 В этом выражении сначала выполнится сложение, а потом умножение



// Оператор запятая (,)

let g = (2, 3, 4, 5); // 5

g = ( 1 + 2, 3 + 4); // 7


// Операторы сравнения

// Оператор больще\меньше (> , <)

console.log( 2 < 1 ); // false

// Любая операция сравнения в результате возвращает логическое значение (булевое)

// Оператор больше\меньше или равно

console.log( 10 <= 10 ); // true

// Оператор равенства (==)

console.log( 3 == 10 ); // false

// Оператор НЕ равно (!=)

console.log( 3 != 10 ); // true


// Оператор строгого равенства (===)

console.log( 3 === '3' ); // false
 
// Оператор строгого равенства проверяет еще и по типу, в отличие от оператора равенства.

// Оператор срогого НЕ равенства (!==)

console.log( 3 !== '3' ); // true


// Сравнение строк

// Сравнение строк происходит по принципу посимвольного сравнения.

/*
    Учитываются порядковые номера символов в таблице Unicode.
    Чем номер больше тем старше символ
*/

console.log( 'Я' > 'A' ); // true

console.log( 'Кот' > 'Код' ); // true

console.log( 'Сонный' > 'Сон' ); // true - Сонный больше т.к. у него больше символов

console.log( 'Банан' > 'апельсин' ); // true











// Логический оператор НЕ (!)

let result = true;

console.log( !result ); // false

/*
    1) В начале произойдет преобразование к булевому значению
    2) Переворот значения наоборот
*/

let number = 10;

console.log( !number ); // false


// Двойной восклицательный знак используется для преобразования к булевому типу.

console.log( !!'не пустая строка' ); // true

/*
    Приоритет ! самый большой среди логических операторов. Он будет выполнятся перед
    операторами && и ||
*/

if( !result == false ){
    console.log( 'В операторе result false' );
}



// Цикл while

// Используется для повторения однотипых действий

let number2 = 0;

while(number2 < 10){
    console.log( number2 );
    number2 = number2 + 1;
}

console.log( number2 ); // 10

/*
    Итерация - одно выполнение тела цикла
*/

let number3 = 3;

while(number3){
    console.log( number3 );
    number3 = number3 - 1;
}



// Цикл do ... while

/*
    То же самое, что while только проверка условия происходит в конце итерации.
    Сначала выполнится тело цикла, а потом проверка условия.
*/

let number4 = 0;

do{
    console.log( number4 );
    number4 = number4 + 1;
} while( number4 < 3 );

// В do...while тело цикла выполнится 1 раз 100%


// Цикл for

for( let i = 0; i < 3; i++ ){
    console.log( 'Коробка' + i );
}


/*
    for(начало; условие; шаг){ тело цикла }

    1) начало - выполнится 1 раз в начале 1 цикла.
    2) условие - проверяется перед каждой итерацией
    3) шаг - выполняется перед каждой итерацией
    4) тело цикла - выполняется бесконечно пока условие true
*/

let h = 0;

for( ; h < 3; h++){

}

console.log( h ); // 3

// Переменная объявленна внутри for видна только внутри тела цикла.


// Прерывание цикла (break)

let number5 = 0;



